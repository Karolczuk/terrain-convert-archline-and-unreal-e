"""
Module is asign to convert to xyz button in gui(gui.converter_window.py)
This module is responsible for the following functions:
- take actual data from utilis.settings_and_data.py ActualVariablesInstance
- convert every point from data_grid_filtered to x, y, z row.
- save all created xyz rows to new xyz file
- update progress bar
- if everything is done, show message that action is complete and save file as .csv
"""
import os
import numpy as np
from PySide6.QtWidgets import QMessageBox, QProgressBar
from PySide6.QtCore import QThread, Signal

from utilis.settings_and_data import ActualVariablesInstance
from utilis.styles import style_progress_bar
from utilis.helpers import show_message

class ConvertToCsv(QThread):
    progress_updated = Signal(int)
    def __init__(self, convert_xyz_progress_bar=QProgressBar):

        super().__init__()
        self.convert_xyz_progress_bar = convert_xyz_progress_bar
        self.progress_updated.connect(self.update_progress_bar)

    def update_progress_bar(self, value):
        self.convert_xyz_progress_bar.setValue(value)

    def convert(self):
        """
        Archline xyz format scheme:
            
            com_x.value_x;com_y.value_y;com_z.value_z

                com_x - this comment is visible at every terrain point generated by archline - below algorithm generate them by enumerate index points started from 1.
                value_x - this valuses started from value of xllcorner and with every next iteration this value is increased by the value of dx

                com_y - this comment is required by archline but not visible so algorithm assingns to it value 0
                value_y - this valuses started from value of yllcorner and with every next iteration this value is increased by the value of dy

                com_z - this comment is required by archline but not visible so algorithm assingns to it value 0
                value_z - values from data_grid_filtered (array)

            !!! data from mapy.geoportal.pl uses a EPSG:2180 - ETRF2000-PL/CS92 (ID:EPSG:2180) coordinate system !!!
        """
        # FORMAT VALUE METHOD
        def format(number):
            """
                !!! Sign '.' is interpreted by Archline like conjunction beteween comment - value and ',' is interpredet as well as ';' that is separation between x and y and z. 
                It was the reason why in output csv file there no way to use float numbers. In response to this algorithm separates the integer part from the decimal part and next
                combines text like this way:
                'integer part' + '(decimal part*100)' + '/100' - when archline get a valuse stored in this way, it performs an operation and combiles it back into a float number!!!
            """
            formated_number = f'{int(round(number,2))}+{int(round((number-int(number))*100, 2))}/100'
            return formated_number
        
        # INPUT DATA
        # get data from utilis.settings_and_data.py ActualVariablesInstance      
        path = ActualVariablesInstance.get_variable(1)
        data_grid_filtered = ActualVariablesInstance.get_variable(11)
        mesh_density = round(ActualVariablesInstance.get_variable(10))
        xllcorner = ActualVariablesInstance.get_variable(5)
        yllcorner = ActualVariablesInstance.get_variable(6)
        dx = ActualVariablesInstance.get_variable(7)
        dy = ActualVariablesInstance.get_variable(8)
        # initialization of variables
        amount_of_points = np.array(data_grid_filtered).size
        actual_converted_amount_of_points = 0 

        #FORMATING ASCII GRID FILE TO XYZ ARCHLINE FILE
        with open (path, 'w', encoding='utf-8') as output_file:
            # show convert progress bar
            self.convert_xyz_progress_bar.setStyleSheet(style_progress_bar)
            # set convert xyz progress bar value on 0
            self.convert_xyz_progress_bar.setValue(0)
            # iteration every row in data_grid_filtered array 
            for row_index, row in enumerate(data_grid_filtered[::-1], start=1):
                # iteration every value in row
                for elevation_index, elevation in enumerate(row, start=1):
                    
                    actual_converted_amount_of_points+=1                            # set up actual converted point                    
                    x=format(xllcorner+dx*((elevation_index-1)*mesh_density))       # set up x value                    
                    y=format(yllcorner+dy*((row_index-1)*mesh_density))             # set up y value                    
                    z=format(elevation)                                             # set up z value

                    output_file.write(f'{actual_converted_amount_of_points}.{x};0.{y};0.{z}\n') # combine x y and z value and add comments

                    self.progress_updated.emit(int((actual_converted_amount_of_points / amount_of_points) * 100)) # update convert progress bar in every step of iteration

            self.convert_xyz_progress_bar.setValue(100)  # update convert progress bar to 100%
            show_message(None, f'Pomy≈õlnie utworzono plik: {os.path.basename(path)}!', "Utworzono plik", QMessageBox.Information)